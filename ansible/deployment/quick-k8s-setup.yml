---
# Quick Kubernetes Setup - Fixed version
- name: Setup Kubernetes cluster
  hosts: all
  become: yes
  vars:
    cluster_endpoint: "10.1.1.10:6443"
    pod_network_cidr: "10.244.0.0/16"
    
  tasks:
    - name: Update apt and install prerequisites
      apt:
        name: 
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
        update_cache: yes
        state: present

    - name: Disable swap
      shell: swapoff -a && sed -i '/ swap / s/^/#/' /etc/fstab

    - name: Load required kernel modules
      modprobe:
        name: "{{ item }}"
      loop:
        - overlay
        - br_netfilter

    - name: Configure kernel modules
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/k8s.conf

    - name: Configure sysctl
      copy:
        content: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward = 1
        dest: /etc/sysctl.d/k8s.conf
      notify: reload sysctl

    - name: Install Docker
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list
        apt-get update
        apt-get install -y containerd.io
        mkdir -p /etc/containerd
        containerd config default | tee /etc/containerd/config.toml
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
        systemctl restart containerd
        systemctl enable containerd

    - name: Install Kubernetes packages
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
        apt-get update
        apt-get install -y kubelet kubeadm kubectl
        apt-mark hold kubelet kubeadm kubectl
        systemctl enable kubelet

    - name: Set hostname
      hostname:
        name: "{{ hostname }}"
      when: hostname is defined

  handlers:
    - name: reload sysctl
      shell: sysctl --system

# HAProxy setup
- name: Setup Load Balancer
  hosts: k8s_lb
  become: yes
  tasks:
    - name: Install HAProxy
      apt:
        name: haproxy
        state: present

    - name: Configure HAProxy
      copy:
        content: |
          global
              daemon
          defaults
              mode tcp
              timeout connect 5000ms
              timeout client 50000ms
              timeout server 50000ms
          frontend k8s-api
              bind *:6443
              default_backend k8s-masters
          backend k8s-masters
              balance roundrobin
              server master1 10.1.1.11:6443 check
              server master2 10.1.1.12:6443 check
              server master3 10.1.1.13:6443 check
        dest: /etc/haproxy/haproxy.cfg
      notify: restart haproxy

  handlers:
    - name: restart haproxy
      systemd:
        name: haproxy
        state: restarted
        enabled: yes

# Initialize first master
- name: Initialize Kubernetes cluster
  hosts: 10.1.1.11
  become: yes
  tasks:
    - name: Check if cluster exists
      stat:
        path: /etc/kubernetes/admin.conf
      register: cluster_exists

    - name: Initialize cluster
      shell: |
        kubeadm init \
          --control-plane-endpoint="{{ cluster_endpoint }}" \
          --upload-certs \
          --apiserver-advertise-address=10.1.1.11 \
          --pod-network-cidr={{ pod_network_cidr }}
      when: not cluster_exists.stat.exists
      register: kubeadm_output

    - name: Setup kubectl for ubuntu user
      shell: |
        mkdir -p /home/ubuntu/.kube
        cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
        chown ubuntu:ubuntu /home/ubuntu/.kube/config

    - name: Install Calico network
      become_user: ubuntu
      shell: |
        kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/tigera-operator.yaml
        kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/custom-resources.yaml

    - name: Generate join commands
      shell: |
        echo "# Control plane join:" > /tmp/join-commands.sh
        kubeadm token create --print-join-command --certificate-key $(kubeadm init phase upload-certs --upload-certs 2>/dev/null | tail -1) >> /tmp/join-commands.sh
        echo "# Worker join:" >> /tmp/join-commands.sh  
        kubeadm token create --print-join-command >> /tmp/join-commands.sh

    - name: Fetch join commands
      fetch:
        src: /tmp/join-commands.sh
        dest: /tmp/k8s-join-commands.sh
        flat: yes

# Join other masters
- name: Join other control plane nodes  
  hosts: k8s_masters:!10.1.1.11
  become: yes
  tasks:
    - name: Check if already joined
      stat:
        path: /etc/kubernetes/admin.conf
      register: already_joined

    - name: Join as control plane
      shell: |
        CP_JOIN=$(grep -A1 "Control plane join:" /tmp/k8s-join-commands.sh | tail -1)
        $CP_JOIN --control-plane
      when: not already_joined.stat.exists

    - name: Setup kubectl
      shell: |
        mkdir -p /home/ubuntu/.kube
        cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
        chown ubuntu:ubuntu /home/ubuntu/.kube/config

# Join workers
- name: Join worker nodes
  hosts: k8s_workers
  become: yes  
  tasks:
    - name: Check if already joined
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: already_joined

    - name: Join as worker
      shell: |
        WORKER_JOIN=$(grep -A1 "Worker join:" /tmp/k8s-join-commands.sh | tail -1)
        $WORKER_JOIN
      when: not already_joined.stat.exists

# Final setup
- name: Final cluster configuration
  hosts: 10.1.1.11
  become_user: ubuntu
  tasks:
    - name: Wait for nodes
      pause:
        seconds: 30

    - name: Label worker nodes
      shell: kubectl label node {{ item }} node-role.kubernetes.io/worker=worker --overwrite
      loop:
        - k8s-worker-01
        - k8s-worker-02
        - k8s-worker-03
        - k8s-worker-05
        - k8s-worker-06  
        - k8s-worker-07
      ignore_errors: yes

    - name: Show cluster status
      shell: kubectl get nodes -o wide
      register: nodes_status

    - name: Display nodes
      debug:
        msg: "{{ nodes_status.stdout_lines }}"