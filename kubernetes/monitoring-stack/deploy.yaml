---
# Namespace for monitoring stack
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
    homelab.component: monitoring

---
# ConfigMap for Grafana dashboards
apiVersion: v1
kind: ConfigMap
metadata:
  name: homelab-dashboards
  namespace: monitoring
  labels:
    grafana_dashboard: "1"
    grafana_folder: "Homelab"
data:
  homelab-overview.json: |
    {{ .Files.Get "dashboards/homelab-overview.json" | indent 4 }}
  gpu-monitoring.json: |
    {{ .Files.Get "dashboards/gpu-monitoring.json" | indent 4 }}

---
# Secret for Grafana admin credentials
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin-credentials
  namespace: monitoring
type: Opaque
data:
  admin-password: "{{ "homelab-admin-2024" | b64enc }}"
  smtp-user: "{{ "your-email@gmail.com" | b64enc }}"
  smtp-password: "{{ "your-app-password" | b64enc }}"

---
# PersistentVolumeClaim for Prometheus data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data
  namespace: monitoring
  labels:
    homelab.component: prometheus
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 200Gi

---
# PersistentVolumeClaim for Grafana data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-data
  namespace: monitoring
  labels:
    homelab.component: grafana
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 50Gi

---
# Service Monitor for GPU metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: nvidia-gpu-exporter
  namespace: monitoring
  labels:
    app: nvidia-gpu-exporter
spec:
  selector:
    matchLabels:
      app: nvidia-gpu-exporter
  endpoints:
  - port: metrics
    interval: 5s
    path: /metrics

---
# Service Monitor for Smart disk metrics
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: smart-exporter
  namespace: monitoring
  labels:
    app: smart-exporter
spec:
  selector:
    matchLabels:
      app: smart-exporter
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# Service Monitor for Pi-hole
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: pihole-exporter
  namespace: monitoring
  labels:
    app: pihole-exporter
spec:
  selector:
    matchLabels:
      app: pihole-exporter
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# DaemonSet for NVIDIA GPU Exporter
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nvidia-gpu-exporter
  namespace: monitoring
  labels:
    app: nvidia-gpu-exporter
spec:
  selector:
    matchLabels:
      app: nvidia-gpu-exporter
  template:
    metadata:
      labels:
        app: nvidia-gpu-exporter
    spec:
      hostNetwork: true
      hostPID: true
      nodeSelector:
        nvidia.com/gpu.present: "true"
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule
      containers:
      - name: nvidia-gpu-exporter
        image: mindprince/nvidia_gpu_prometheus_exporter:0.1
        ports:
        - containerPort: 9400
          name: metrics
        securityContext:
          privileged: true
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
            nvidia.com/gpu: 1
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys

---
# Service for NVIDIA GPU Exporter
apiVersion: v1
kind: Service
metadata:
  name: nvidia-gpu-exporter
  namespace: monitoring
  labels:
    app: nvidia-gpu-exporter
spec:
  selector:
    app: nvidia-gpu-exporter
  ports:
  - name: metrics
    port: 9400
    targetPort: 9400
    protocol: TCP

---
# DaemonSet for Smart Disk Monitoring
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: smart-exporter
  namespace: monitoring
  labels:
    app: smart-exporter
spec:
  selector:
    matchLabels:
      app: smart-exporter
  template:
    metadata:
      labels:
        app: smart-exporter
    spec:
      hostNetwork: true
      hostPID: true
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      containers:
      - name: smart-exporter
        image: prometheuscommunity/smartctl-exporter:latest
        ports:
        - containerPort: 9633
          name: metrics
        securityContext:
          privileged: true
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        volumeMounts:
        - name: dev
          mountPath: /host/dev
          readOnly: true
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        env:
        - name: SMARTCTL_EXPORTER_DEVICES
          value: "/dev/nvme0n1,/dev/sda,/dev/sdb"
      volumes:
      - name: dev
        hostPath:
          path: /dev
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys

---
# Service for Smart Exporter
apiVersion: v1
kind: Service
metadata:
  name: smart-exporter
  namespace: monitoring
  labels:
    app: smart-exporter
spec:
  selector:
    app: smart-exporter
  ports:
  - name: metrics
    port: 9633
    targetPort: 9633
    protocol: TCP

---
# Ingress for Grafana
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - grafana.homelab.local
    secretName: grafana-tls
  rules:
  - host: grafana.homelab.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000

---
# Ingress for Prometheus
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prometheus-ingress
  namespace: monitoring
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - prometheus.homelab.local
    secretName: prometheus-tls
  rules:
  - host: prometheus.homelab.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus-operated
            port:
              number: 9090

---
# NetworkPolicy for monitoring namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: monitoring-network-policy
  namespace: monitoring
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: monitoring
  - from: []
    ports:
    - protocol: TCP
      port: 3000  # Grafana
    - protocol: TCP
      port: 9090  # Prometheus
    - protocol: TCP
      port: 9093  # Alertmanager
  egress:
  - {}  # Allow all egress for scraping metrics